npm is still tripping on workspace:* version strings that remain in every package.json, even after you deleted the dependency keys.

When you run an app-local install (cd frontend/apps/super-admin && npm install ‚Ä¶) that protocol is illegal, so the build aborts with:

graphql
Copy
Edit
npm ERR! Unsupported URL Type "workspace:": workspace:*
üí° Two reliable ways to eliminate the error
A ‚Äî Build once at repo-root (recommended)	B ‚Äî Scrub the version strings
- Keep workspaces; Docker does one install at /app so workspace:* is valid.
- No per-app npm install.	- Rewrite any "workspace:*" (or "workspace:^3.1.0") to a real semver ("*" is fine).
- Do this before each per-app install.

Option A ‚Äî simplest & fastest
Dockerfile

dockerfile
Copy
Edit
FROM node:20-alpine

WORKDIR /app

# ‚îÄ‚îÄ 1. Copy only manifests first
COPY package*.json ./
COPY frontend/package.json frontend/
COPY frontend/apps/*/package.json frontend/apps/*/

# ‚îÄ‚îÄ 2. Single install for the whole monorepo
RUN npm ci --workspaces --include-workspace-root && npm cache clean --force

# ‚îÄ‚îÄ 3. Build every workspace that has a build script
RUN npm run build --workspaces --if-present

# ‚îÄ‚îÄ 4. Copy the rest of the source
COPY . .

EXPOSE 8080
CMD ["node", "complete-platform-starter.js"]
Remove every line like:

dockerfile
Copy
Edit
RUN cd frontend/apps/super-admin && npm install ‚Ä¶
Because the root‚Äêlevel install already built all workspaces.

Option B ‚Äî if you must keep per-app installs
Add one small Node script that replaces the version strings:

js
Copy
Edit
// fix-workspace-versions.js
const fs = require('fs');
const glob = require('glob');

glob.sync('frontend/apps/*/package.json').forEach(p => {
  const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
  let changed = false;

  ['dependencies', 'devDependencies', 'peerDependencies'].forEach(field => {
    if (!pkg[field]) return;
    for (const dep in pkg[field]) {
      if (pkg[field][dep].startsWith('workspace:')) {
        pkg[field][dep] = '*';          // or a real version you want
        changed = true;
      }
    }
  });

  if (changed) {
    fs.writeFileSync(p, JSON.stringify(pkg, null, 2));
    console.log(`üìù cleaned ${p}`);
  }
});
Then call it once in the Dockerfile before your first per-app install:

dockerfile
Copy
Edit
RUN node fix-workspace-versions.js

RUN cd frontend/apps/super-admin     && npm ci --legacy-peer-deps && npm run build
RUN cd frontend/apps/admin-portal    && npm ci --legacy-peer-deps && npm run build
RUN cd frontend/apps/ecommerce-web   && npm ci --legacy-peer-deps && npm run build
RUN cd frontend/apps/ecommerce-mobile&& npm ci --legacy-peer-deps && npm run build
RUN cd frontend/apps/ops-delivery    && npm ci --legacy-peer-deps && npm run build
Either approach removes all workspace:* tokens, so npm install can succeed.